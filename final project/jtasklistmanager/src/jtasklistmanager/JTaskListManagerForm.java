/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package jtasklistmanager;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


public class JTaskListManagerForm extends javax.swing.JFrame {

    private DatabaseManager dbManager;
    private ArrayList<TaskList> taskListList;
    private DefaultComboBoxModel model;
    
    
    
    public JTaskListManagerForm() {
        initComponents();
        dbManager = new DatabaseManager();
        taskListList = new ArrayList();
        model = new DefaultComboBoxModel(new String[]{});
        taskListComboBox.setModel(model);
        initTaskListList();
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                checkIfSavedAndExit();
                
            }
        });
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        addTaskButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        taskListComboBox = new javax.swing.JComboBox();
        addTaskListButton = new javax.swing.JButton();
        deleteTaskListButton = new javax.swing.JButton();
        saveTaskListButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        centerPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("J Task List Manager");
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setLayout(new java.awt.BorderLayout());

        addTaskButton.setText("Add Task");
        addTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskButtonActionPerformed(evt);
            }
        });
        jPanel4.add(addTaskButton);

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        taskListComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        taskListComboBox.setPreferredSize(new java.awt.Dimension(400, 29));
        taskListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskListComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(taskListComboBox);

        addTaskListButton.setText("Add Task List");
        addTaskListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskListButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addTaskListButton);

        deleteTaskListButton.setText("Delete Task List");
        deleteTaskListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaskListButtonActionPerformed(evt);
            }
        });
        jPanel2.add(deleteTaskListButton);

        saveTaskListButton.setText("Save Changes To Task List");
        saveTaskListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTaskListButtonActionPerformed(evt);
            }
        });
        jPanel2.add(saveTaskListButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        centerPane.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane2.setViewportView(centerPane);

        jPanel3.add(jScrollPane2);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1);

        setBounds(0, 0, 990, 615);
    }// </editor-fold>//GEN-END:initComponents

    private void addTaskListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskListButtonActionPerformed
        String newTaskListName = JOptionPane.showInputDialog(null, "Enter Name Of New Task List");
       
        if(newTaskListName.length() !=0 && newTaskListName.trim().length() > 0){
            String newPath = String.valueOf(taskListList.size() + 1) + ".bin";
            TaskList tl = new TaskList(newTaskListName, newPath);

            saveTaskList(tl);

            try{
                dbManager.insertIntoDatabase(new String[]{newTaskListName, newPath});
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            taskListList.add(tl);
            model.addElement(newTaskListName);
            taskListComboBox.setSelectedIndex(taskListList.size() - 1);
            addTaskButton.setEnabled(true);
            deleteTaskListButton.setEnabled(true);
            saveTaskListButton.setEnabled(true);
        //    modifyList.setEnabled(true);
        }
        
        else{
            JOptionPane.showMessageDialog(this, "Please enter a name for your task list first. Try again.");
        }
        
        
        
        
    }//GEN-LAST:event_addTaskListButtonActionPerformed

    private void saveTaskListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTaskListButtonActionPerformed
        TaskList tl = taskListList.get(taskListComboBox.getSelectedIndex());
        
        saveTaskList(tl);
        
    }//GEN-LAST:event_saveTaskListButtonActionPerformed

    private void addTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskButtonActionPerformed
       if(taskListComboBox.getItemCount() != 0){
           
        String newTaskName = JOptionPane.showInputDialog(null, "Enter Name Of New Task");
        if(newTaskName.length() !=0 && newTaskName.trim().length() > 0){
            TaskList tl = taskListList.get(taskListComboBox.getSelectedIndex());
            Task t = new Task(newTaskName);
            tl.addTask(t);
            addTaskToCenter(t, tl.getLength(), tl.getLength() - 1);
            tl.setSaved(false);
            displayIfSaved(tl.isSaved());
        }
       }
       else{
           JOptionPane.showMessageDialog(this, "Please enter first a new task list.");
       }
    }//GEN-LAST:event_addTaskButtonActionPerformed

    private void deleteTaskListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaskListButtonActionPerformed
        int currentIndex = taskListComboBox.getSelectedIndex();
        TaskList tl = taskListList.get(currentIndex);
        
        int dialogResult = JOptionPane.showConfirmDialog(null, "Delete TaskList " + tl.getTitle() + "?", "Warning", JOptionPane.YES_NO_OPTION);
        
        if(dialogResult == JOptionPane.YES_OPTION){
            taskListComboBox.setSelectedIndex(0); //fixes bugs that causes array index desynchronization between tasklistcombobox and tasklistlist
            taskListList.remove(currentIndex);
            
            taskListComboBox.removeItemAt(currentIndex);
        
            File file = new File(dbManager.getSystemDir() + tl.getPath());
            try{
                dbManager.deleteFromDatabase(tl);
                file.delete();
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            finally{
                setButtonsState();
            }
            
        }
        
        
    }//GEN-LAST:event_deleteTaskListButtonActionPerformed

    private void taskListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskListComboBoxActionPerformed
        centerPane.removeAll();
        int index = taskListComboBox.getSelectedIndex();
        if(index < 0){
            centerPane.removeAll();
            centerPane.repaint();
        }
        else{
//            System.out.println(taskListList.size());
//            System.out.println(index);
//            System.out.println();
            //gets rid of bug when if item at taskListComboBox.getSelectedIndex 0 is deleted index 1 is selected which leads to index out of bounds errors between tasklistlist and tasklistcombobox
            
            if(taskListComboBox.getItemCount() != taskListList.size()){

                TaskList tlCurrent = taskListList.get(index - 1);
                displayTasks(tlCurrent);
                displayIfSaved(tlCurrent.isSaved());
            }
            else{

                TaskList tlCurrent = taskListList.get(index);
                displayTasks(tlCurrent);
                displayIfSaved(tlCurrent.isSaved());

            }
        } 

    }//GEN-LAST:event_taskListComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTaskListManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTaskListManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTaskListManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTaskListManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JTaskListManagerForm j = new JTaskListManagerForm();
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                j.setLocation(dim.width/2-j.getSize().width/2, dim.height/2-j.getSize().height/2);
                j.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTaskButton;
    private javax.swing.JButton addTaskListButton;
    private javax.swing.JPanel centerPane;
    private javax.swing.JButton deleteTaskListButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveTaskListButton;
    private javax.swing.JComboBox taskListComboBox;
    // End of variables declaration//GEN-END:variables
    
    private void initTaskListList(){
        try{
            if(dbManager.getResultSetLength() == 0){
                taskListList = new ArrayList();
                addTaskButton.setEnabled(false);
                deleteTaskListButton.setEnabled(false);
                saveTaskListButton.setEnabled(false);
               // modifyList.setEnabled(false);
            }
            else{
                int taskListLength = dbManager.getResultSetLength();
                dbManager.resetResult();
                for(int i=1;i<=taskListLength;i++){
                    String[] contents = dbManager.getCurrentContents();
                    
                    FileInputStream fin = new FileInputStream(dbManager.getSystemDir() + contents[1]);
                    
                    ObjectInputStream ois = new ObjectInputStream(fin);
                    TaskList taskList = (TaskList) ois.readObject();
                    taskList.setSaved(true);
                    taskListList.add(taskList);
                    
                    model.addElement(contents[0]);
                    dbManager.nextResult();
                }
                taskListComboBox.setSelectedIndex(0); //resets taskListComboBox.getItemCount from 1 to actual amount
            }

        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }   
    }
    
    private void displayTasks(TaskList tl){
        ArrayList<Task> tlList = tl.getTaskList();
        int length = tlList.size();
        if(length == 0){
            centerPane.setLayout(new java.awt.GridLayout(1, 0, 0, 20));
        }
        else{
            centerPane.setLayout(new java.awt.GridLayout(length, 0, 0, 20));
        }

        for(int i=0;i<length;i++){
            addTaskToCenter(tlList.get(i), length, i);
        }
        centerPane.repaint();
        
    }
    
    public void addTaskToCenter(Task t, final int length, final int index){
        centerPane.setLayout(new java.awt.GridLayout(length, 0, 0, 20));
        final JPanel taskPane1 = new JPanel();
        taskPane1.setName(String.valueOf(index));
        
        JTextField jTextField1 = new JTextField(t.getTaskName());
        jTextField1.setPreferredSize(new java.awt.Dimension(600, 29));
        jTextField1.setName(String.valueOf(index));
        jTextField1.addFocusListener( new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                //nothing required
            }

            @Override
            public void focusLost(FocusEvent e) {
                TaskList tl = taskListList.get(taskListComboBox.getSelectedIndex());
                JTextField currentTextField = ((JTextField)e.getSource());
                int index = Integer.parseInt(currentTextField.getName());
                
                Task t = tl.get(index);
                
                String newName = currentTextField.getText();
                
                if(!t.getTaskName().equals(newName)){
                    t.setTaskName(newName);
                    tl.setSaved(false);
                    displayIfSaved(tl.isSaved());
                }        
            }

        });
        taskPane1.add(jTextField1);
            
        JCheckBox jCheckBox1 = new JCheckBox("Done", t.isIsDone());
        jCheckBox1.setName(String.valueOf(index));
        jCheckBox1.addActionListener( new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    TaskList tl = taskListList.get(taskListComboBox.getSelectedIndex());
                    JCheckBox currentCheckBox = ((JCheckBox)e.getSource());
                    int index = Integer.parseInt(currentCheckBox.getName());
                    Task t = tl.get(index);
                    t.setIsDone(currentCheckBox.isSelected());
                    
                    tl.setSaved(false);
                    displayIfSaved(tl.isSaved());
                    
                    
                }

        });
        
        taskPane1.add(jCheckBox1);
            
        JButton jButton6 = new JButton("Delete Task");
        jButton6.setName(String.valueOf(index));
        jButton6.addActionListener( new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    TaskList tl = taskListList.get(taskListComboBox.getSelectedIndex());
                    JButton currentButton = ((JButton)e.getSource());
                    int index = Integer.parseInt(currentButton.getName());
                    tl.deleteTask(index);
                    tl.setSaved(false);
                    displayIfSaved(tl.isSaved());
                    
                    centerPane.removeAll();
                    displayTasks(tl);
                }

        });
        taskPane1.add(jButton6);

        centerPane.add(taskPane1);
        centerPane.revalidate();
    }
    
        
    private void saveTaskList(TaskList tl){
        try{
            FileOutputStream fout = new FileOutputStream(dbManager.getSystemDir() + tl.getPath());
            ObjectOutputStream oos = new ObjectOutputStream(fout);
            oos.writeObject(tl);
            centerPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            tl.setSaved(true);

        }
        catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void displayIfSaved(boolean saved){
        if(saved){
            centerPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }
        else{
            centerPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        }
    }
    
    private void checkIfSavedAndExit(){
        boolean isEverythingSaved = true;
        
        for(int i=0; i<taskListList.size();i++){
            if(!taskListList.get(i).isSaved()){
                isEverythingSaved = false;
                break;
            }
        }
        
        int retValue = -1;
        
        
        if(!isEverythingSaved){
            
            retValue = JOptionPane.showOptionDialog(null, "Save changes to Task Lists before exiting?", "Save Changes?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if(retValue == JOptionPane.YES_OPTION){
                for(int i=0; i<taskListList.size();i++){
                    TaskList tl2 = taskListList.get(i);
                    if(!tl2.isSaved()){
                        saveTaskList(tl2);
                    }
                }
            }
                    
        }

        if(isEverythingSaved || retValue != JOptionPane.CANCEL_OPTION){
            System.exit(0);
        }
    }
        
   
    private void setButtonsState(){
        if(taskListList.size() == 0){
            addTaskButton.setEnabled(false);
            deleteTaskListButton.setEnabled(false);
            saveTaskListButton.setEnabled(false);
          //  modifyList.setEnabled(false);
        }
        else{
            addTaskButton.setEnabled(true);
            deleteTaskListButton.setEnabled(true);
            saveTaskListButton.setEnabled(true);
       //     modifyList.setEnabled(true);
        }
        
    }
    
    
}







